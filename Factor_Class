// Name:     Amal Mohamed
// Date:     April 3, 2019
// Filename: Factor.cs
// Version:  2.0
//Platform:  Visual Studio 2017

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Implementation Invariant:
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// - Details important Only for Class Designer
// - Document Design Decisions that are impactful to implementaion choices
// - FactorValue        - readonly integer
//                      - assigned to this.factorValue in Constructor
//                      - used to check if it is divisble by Input from Random Generator
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- NumberOfMultiples   - integer
//                      - Set to 0 in the Constructor
//                      - Used to track the number of multiples for factorValue
//                      - Incremented everytime a multiple of factorValue is found
//                      - Reset to 0 upon reset call ie. reset()
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- SecondInput         - Integer set to -1 in Constructor
//                      - Used for tracking the secondInput entered by user (Random Generator)
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- Factor object state - Set to Active upon object creation in the Constructor
//                      - The current state is returned by isActive()
//                      - State becomes inactive if previousInput = SecondInput in Div()
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- IsActive() :
// - Returns the state of the Object
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- getSecondInput():
// - Returns the secondInput from the client (Random Generator)
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Div(input) :
// - Returns a boolean isDivisible
// - isDivisble is true when input is divisible by factorValue therefore a multiple of factor is found.
// - isDivisble is false when input isn't divisible by factorValue ; a factor isn't found
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Reset() :
// - Pre: ressetting inactive object isn't possible
// - Post: Object is active, numberOfMultiples is set to 0
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Class Invariants
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// The initial state of the object is Active
// The state transitions to inactive if previousInput = secondInput
// Reset() can only be called if the state of the object is inactive
// Reset() immediately sets the object's state to active
// User can't see the inactive state because reset() takes care of it
// Constructor takes an integer factorValue as a parameter
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


using System;
namespace P2
{
    public class Factor
    {
        private readonly int factorValue;
        private int numberOfMultiples;
        private bool isActive;
        private int secondInput;
        public const int DIV_ERROR_CODE = 0;

        public Factor(int factorValue)
        {
            this.factorValue = factorValue;
            isActive = true;
            numberOfMultiples = 0;
            secondInput = -1;
        }

        public bool IsActive()
        {
            return isActive;
        }

        public int getSecondInput()
        {
            return secondInput;
        }

 

        public bool Div(int input)
        {
            bool isDivisible;
            isDivisible = false;
            if (input == secondInput)
            {
                isActive = false;
                Reset();
            }
            else
            {

                if (input % factorValue == 0)
                {
                    numberOfMultiples++;
                    isDivisible = true;

                }
                else
                {
                    isDivisible = false;
                }
                secondInput = input;

            }

            return isDivisible;

        }

        public bool Reset()
        {
            if (isActive)
            {
                return false;
            }
            isActive = true;
            numberOfMultiples = 0;
            secondInput = -1;
            return true;
        }
    }
}



//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Description and Explanation of the process performed by the program
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- The program contains an encapsulated factor class from which objects can be created
//- The Object encapsulates a factor and if active identifies if the incoming value 
//- as a multiple of factor and keeps count of all incoming values that are multiples
//- Resetting the object's state to it's initial state of isActive = true can be done 
//- if there are two successive entries with same value in the div Function
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Explanation of user interface (input,meaning of input)
// -User can query the divCount of a factor Object, find out the state of the object ,and reset that state of the object
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Comments on use and Validity (error processing)
// -If a user's queries can't be satisfied, an error code of 0 is displayed.
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//List of Factor public functions
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- public bool isActive()
//- public int getSecondInput()
//- public int Div(int input)
//- public bool Reset()
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Assumptions
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- IsActive() assumptions:
// - It can be a type of query by the user.
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//- getSecondInput() assumptions:
// - It can be a type of query by the user.
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Div(input) assumptions:
//- Div identifies if input is a multiple of factor and keeps track of the number of Multiples factor 
//- has by incrementing number of multiples everytime a multiple of factor is found.For example lets 
//- say Factor = 7 and input is 42 , 42 is a multiple of 7 therefore the number of Multiples will
//- increase by 1
// - Should reset the state of object when two successive entries are entered for the input .
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Reset() assumptions:
// - Marks the object as active if it isn't already actve
// - Should reset the numberOfMultiples and secondInput
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



using System;
namespace P1
{
    public class MainClass
    {
        const int SIZE = 20;
        const int MAX = 4;
        const int FIRST_INDEX = 0;
        const int MIN = 1;

        public static void Main()
        {

            Random random = new Random();
            Console.WriteLine("Welcome to the user Interface!");
            Console.WriteLine("In this Interface you will find out if random values(input) are multiples of a factor ");
            Console.WriteLine("You will find out the state of the object and reset an object if it is not perminately deactivated.");
            Console.WriteLine();
            DivQuery(random);
            Console.WriteLine();
            Console.WriteLine("Goodbye, thank you for visiting my user Interface");
        }

        public static void DivQuery(Random random)
        {
            Console.WriteLine("Creating Objects ");
            int[] randInt = new int[SIZE];

            for (int i = 0; i < SIZE; i++)
            {
                randInt[i] = (int)random.Next(MIN, MAX);
            }
            Factor divObj = new Factor(2);
            for (int i = 0; i < SIZE; i++)
            {
                Console.WriteLine("Previous Input: " + divObj.getSecondInput());
                Console.WriteLine("Div(" + randInt[i] + ")returns->" + divObj.Div(randInt[i]));
                TriggeringIsActive(divObj);
                TriggeringReset(divObj);
            }
        }

        public static void TriggeringIsActive(Factor activeObj)
        {
            Console.WriteLine("Testing the state of object 1");
            bool isActive = activeObj.IsActive();
            Console.WriteLine("If object is isActive,should return true");
            Console.WriteLine("It returned: " + isActive);
            Console.WriteLine();
            
        }

        public static void TriggeringReset(Factor divObj)
        {
            Console.WriteLine("Attempting to reset an inactive " + "object 1  ");
            bool resetReturnState = divObj.Reset();
            Console.WriteLine("Resetting a deactivated object should return" + " false.");
            Console.WriteLine("It actually returned: " + resetReturnState);
            Console.WriteLine();
        }

    }
}
